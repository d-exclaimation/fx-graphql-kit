// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/d-exclaimation/fx-graphql-kit/ent/thought"
)

// Thought is the model entity for the Thought schema.
type Thought struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// ImageURL holds the value of the "imageURL" field.
	ImageURL string `json:"imageURL,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId int64 `json:"userId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Thought) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case thought.FieldID, thought.FieldUserId:
			values[i] = &sql.NullInt64{}
		case thought.FieldTitle, thought.FieldBody, thought.FieldImageURL:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Thought", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Thought fields.
func (t *Thought) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case thought.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case thought.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case thought.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				t.Body = value.String
			}
		case thought.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imageURL", values[i])
			} else if value.Valid {
				t.ImageURL = value.String
			}
		case thought.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				t.UserId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Thought.
// Note that you need to call Thought.Unwrap() before calling this method if this Thought
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Thought) Update() *ThoughtUpdateOne {
	return (&ThoughtClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Thought entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Thought) Unwrap() *Thought {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Thought is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Thought) String() string {
	var builder strings.Builder
	builder.WriteString("Thought(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", title=")
	builder.WriteString(t.Title)
	builder.WriteString(", body=")
	builder.WriteString(t.Body)
	builder.WriteString(", imageURL=")
	builder.WriteString(t.ImageURL)
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", t.UserId))
	builder.WriteByte(')')
	return builder.String()
}

// Thoughts is a parsable slice of Thought.
type Thoughts []*Thought

func (t Thoughts) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
